#!/usr/bin/env python3
"""
Enhanced Notification System for GCP Free Tier Monitor
"""

import smtplib
import json
import requests
import time
import datetime
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from dataclasses import dataclass
from typing import List, Dict, Any
import logging

@dataclass
class NotificationConfig:
    """Configuration for various notification channels"""
    # Email notifications
    smtp_server: str = "smtp.gmail.com"
    smtp_port: int = 587
    email_user: str = ""
    email_password: str = ""
    to_emails: List[str] = None
    
    # Slack notifications
    slack_webhook_url: str = ""
    
    # Discord notifications
    discord_webhook_url: str = ""
    
    # SMS notifications (Twilio)
    twilio_account_sid: str = ""
    twilio_auth_token: str = ""
    twilio_from_number: str = ""
    to_phone_numbers: List[str] = None

class NotificationManager:
    """Enhanced notification system for GCP monitoring alerts"""
    
    def __init__(self, config: NotificationConfig):
        self.config = config
        self.logger = logging.getLogger(__name__)
    
    def send_email_alert(self, subject: str, body: str, is_critical: bool = False):
        """Send email notification"""
        if not self.config.email_user or not self.config.to_emails:
            return False
            
        try:
            msg = MIMEMultipart()
            msg['From'] = self.config.email_user
            msg['To'] = ', '.join(self.config.to_emails)
            msg['Subject'] = f"üö® GCP Alert: {subject}" if is_critical else f"‚ö†Ô∏è GCP Warning: {subject}"
            
            # Enhanced HTML body
            html_body = f"""
            <html>
            <body style="font-family: Arial, sans-serif;">
                <div style="background: {'#ffebee' if is_critical else '#fff3e0'}; padding: 20px; border-radius: 5px;">
                    <h2 style="color: {'#c62828' if is_critical else '#f57f17'};">
                        {'üö® CRITICAL ALERT' if is_critical else '‚ö†Ô∏è WARNING'}
                    </h2>
                    <div style="background: white; padding: 15px; border-radius: 3px; margin: 10px 0;">
                        <pre style="white-space: pre-wrap; font-family: monospace;">{body}</pre>
                    </div>
                    <p style="color: #666; font-size: 12px;">
                        Generated by GCP Free Tier Monitor at {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
                    </p>
                </div>
            </body>
            </html>
            """
            
            msg.attach(MIMEText(html_body, 'html'))
            
            with smtplib.SMTP(self.config.smtp_server, self.config.smtp_port) as server:
                server.starttls()
                server.login(self.config.email_user, self.config.email_password)
                server.send_message(msg)
            
            self.logger.info("Email alert sent successfully")
            return True
            
        except Exception as e:
            self.logger.error(f"Failed to send email: {e}")
            return False
    
    def send_slack_alert(self, message: str, is_critical: bool = False):
        """Send Slack notification"""
        if not self.config.slack_webhook_url:
            return False
            
        try:
            color = "#ff0000" if is_critical else "#ffaa00"
            icon = ":rotating_light:" if is_critical else ":warning:"
            
            payload = {
                "attachments": [{
                    "color": color,
                    "title": f"{icon} GCP Free Tier Monitor Alert",
                    "text": message,
                    "footer": "GCP Monitor",
                    "ts": int(time.time())
                }]
            }
            
            response = requests.post(self.config.slack_webhook_url, json=payload)
            response.raise_for_status()
            
            self.logger.info("Slack alert sent successfully")
            return True
            
        except Exception as e:
            self.logger.error(f"Failed to send Slack notification: {e}")
            return False
    
    def send_multi_channel_alert(self, violations: List[Dict[str, Any]], is_critical: bool = False):
        """Send alerts across multiple channels"""
        subject = "Free Tier Limits Exceeded" if is_critical else "Free Tier Warning"
        
        # Format message
        message = f"GCP Project Alert:\n\n"
        for violation in violations:
            message += f"Service: {violation.get('service', 'Unknown')}\n"
            message += f"Issue: {violation.get('description', 'No description')}\n"
            message += f"Current Usage: {violation.get('usage', 'Unknown')}\n"
            message += f"Limit: {violation.get('limit', 'Unknown')}\n\n"
        
        # Send to all configured channels
        self.send_email_alert(subject, message, is_critical)
        self.send_slack_alert(message, is_critical)
        
        return True
